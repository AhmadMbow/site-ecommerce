{% extends "base.html" %}
{% load static %}

{% block title %}Panier{% endblock %}

{% block extra_css %}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/7.3.0/mdb.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="{% static 'css/style2.css' %}">

<style>
  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');

  :root{
    --gold: #ffc107;
    --dark: #232526;
    --light: #f8f9fa;
    --radius: 14px;
    --radius-sm: 10px;
    --shadow-sm: 0 6px 16px rgba(0,0,0,.06);
    --shadow: 0 14px 30px rgba(0,0,0,.10);
    --shadow-lg: 0 24px 48px rgba(0,0,0,.16);
  }

  body{
    font-family: 'Poppins', system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
    background: #fff;
  }

  .container.py-4{ padding-top: 1.25rem !important; padding-bottom: 1.25rem !important; }
  h3{ font-weight: 700; letter-spacing: .2px; }

  /* Section background */
  .gradient-custom{
    background: linear-gradient(180deg, #fff 0%, #fff 40%, rgba(255,193,7,.08) 100%);
    border-radius: var(--radius);
  }

  /* Cards: light glass + elevation */
  .card{
    border: 1px solid rgba(0,0,0,.06) !important;
    border-radius: var(--radius);
    box-shadow: var(--shadow-sm);
    background: rgba(255,255,255,.9);
    backdrop-filter: blur(6px);
    -webkit-backdrop-filter: blur(6px);
    transition: transform .25s ease, box-shadow .25s ease;
  }
  .card:hover{ transform: translateY(-3px); box-shadow: var(--shadow); }
  .card-header{
    border-bottom: 0;
    border-radius: var(--radius) var(--radius) 0 0 !important;
    background: linear-gradient(180deg, rgba(35,37,38,.06), rgba(35,37,38,.02));
  }
  .card-header h5{ margin: 0; font-weight: 700; }

  /* Product image hover */
  .bg-image img{
    border-radius: var(--radius-sm);
    box-shadow: 0 4px 12px rgba(0,0,0,.06);
    transition: transform .35s ease, box-shadow .35s ease;
  }
  .bg-image:hover img{
    transform: scale(1.03);
    box-shadow: var(--shadow);
  }

  /* Buttons */
  .btn{
    border-radius: var(--radius-sm);
    font-weight: 600;
    transition: transform .2s ease, box-shadow .25s ease, background-color .25s ease, color .25s ease, border-color .25s ease;
    will-change: transform, box-shadow;
  }
  .btn:hover{
    transform: translateY(-2px);
    box-shadow: 0 8px 18px rgba(0,0,0,.10);
  }
  .btn-primary{
    background: var(--dark);
    border-color: var(--dark);
  }
  .btn-primary:hover{
    background: #111;
    border-color: #111;
    box-shadow: 0 10px 24px rgba(35,37,38,.25), 0 0 0 .2rem rgba(255,193,7,.25);
  }
  .btn-outline-primary{
    border-color: var(--dark);
    color: var(--dark);
  }
  .btn-outline-primary:hover{
    background: var(--dark);
    color: #fff;
    border-color: var(--dark);
  }

  /* Quantity input (MDB form-outline) */
  .form-outline .form-control{
    border-radius: var(--radius-sm);
    border: 1px solid rgba(0,0,0,.12);
    padding-top: .8rem;
    padding-bottom: .8rem;
  }
  .form-outline .form-control:focus{
    border-color: var(--gold);
    box-shadow: 0 0 0 .2rem rgba(255,193,7,.25);
  }
  .form-outline .form-label{
    color: #6c757d;
  }

  /* List-group */
  .list-group-item{
    border: 1px solid rgba(0,0,0,.06);
  }

  /* Summary card sticky on desktop */
  @media (min-width: 992px){
    .col-md-4 > .card.mb-4{
      position: sticky;
      top: 90px;
    }
  }

  /* Shipping display */
  #shippingDisplay, #distanceDisplay{
    font-weight: 600;
  }

  /* Subtitles and meta */
  .text-muted{ color: #6b7280 !important; }

  /* Divider */
  hr.my-4{
    border: 0; height: 1px;
    background: linear-gradient(90deg, rgba(0,0,0,.06), rgba(0,0,0,.12), rgba(0,0,0,.06));
    border-radius: 999px;
  }

  /* Responsive tweaks */
  @media (max-width: 576px){
    .btn.w-100, .btn.btn-lg{ padding-top: .75rem; padding-bottom: .75rem; }
  }

  /* Dark mode */
  @media (prefers-color-scheme: dark){
    body{ background: #111416; color: #e9ecef; }
    .gradient-custom{ background: linear-gradient(180deg, #111416 0%, #111416 40%, rgba(255,193,7,.12) 100%); }
    .card{ background: rgba(26,29,32,.9); border-color: rgba(255,255,255,.08) !important; box-shadow: 0 10px 26px rgba(0,0,0,.35); }
    .card-header{ background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); }
    .bg-image img{ box-shadow: 0 6px 14px rgba(0,0,0,.4); }
    .form-outline .form-control{ background: #16181a; color: #e9ecef; border-color: rgba(255,255,255,.12); }
    .list-group-item{ background: #1a1d20; border-color: rgba(255,255,255,.08); }
    .btn-outline-primary{ color: #e9ecef; border-color: rgba(255,255,255,.35); }
    .btn-outline-primary:hover{ background: #e9ecef; color: #111; }
  }
</style>
{% endblock %}

{% block content %}
<div class="container py-4">
  <script type="application/json" id="lat_json">{{ adresse_latitude|default:'null'|json_script }}</script>
  <script type="application/json" id="lng_json">{{ adresse_longitude|default:'null'|json_script }}</script>
  <h3 class="mb-3">Mon panier</h3>

  <section class="h-100 gradient-custom">
    <div class="container py-5">
      <div class="row d-flex justify-content-center my-4">
        <!-- Liste des produits -->
        <div class="col-md-8">
          <div class="card mb-4">
            <div class="card-header py-3">
              {% if cart_count %}
                <h5 class="mb-0">Panier — {{ cart_count }} article{% if cart_count|add:-1 %}s{% endif %}</h5>
              {% else %}
                <h5 class="mb-0">Panier — {{ items|length }} article{% if items|length > 1 %}s{% endif %}</h5>
              {% endif %}
            </div>
            <div class="card-body">
              {% if items %}
                {% for item in items %}
                  <div class="row align-items-center mb-4">
                    <div class="col-lg-3 col-md-12">
                      <div class="bg-image hover-overlay hover-zoom ripple rounded">
                        <img src="{% if item.produit.image %}{{ item.produit.image.url }}{% else %}{% static 'images/default.png' %}{% endif %}" class="w-100" alt="{{ item.produit.nom }}">
                      </div>
                    </div>

                    <div class="col-lg-5 col-md-6">
                      <p class="mb-1"><strong>{{ item.produit.nom }}</strong></p>
                      {% if item.produit.couleur %}<p class="mb-1 text-muted small">Couleur: {{ item.produit.couleur }}</p>{% endif %}
                      {% if item.produit.taille %}<p class="mb-1 text-muted small">Taille: {{ item.produit.taille }}</p>{% endif %}

                      <form action="{% url 'retirer_du_panier' item.id %}" method="post" class="d-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-primary btn-sm me-1 mb-2" title="Retirer du panier"><i class="fas fa-trash"></i></button>
                      </form>
                      <button type="button" class="btn btn-danger btn-sm mb-2" disabled title="Wishlist bientôt"><i class="fas fa-heart"></i></button>
                    </div>

                    <div class="col-lg-4 col-md-6">
                      <form action="{% url 'modifier_quantite' %}" method="post" class="d-flex align-items-center mb-3" style="max-width: 320px">
                        {% csrf_token %}
                        <input type="hidden" name="item_id" value="{{ item.id }}">
                        <button type="button" class="btn btn-primary px-3 me-2 btn-qty-change" data-target="#qty-{{ item.id }}" data-delta="-1" title="Diminuer"><i class="fas fa-minus"></i></button>
                        <div data-mdb-input-init class="form-outline flex-grow-1">
                          <input id="qty-{{ item.id }}" min="0" name="qty" value="{{ item.quantite }}" type="number" class="form-control">
                          <label class="form-label" for="qty-{{ item.id }}">Quantité</label>
                        </div>
                        <button type="button" class="btn btn-primary px-3 ms-2 btn-qty-change" data-target="#qty-{{ item.id }}" data-delta="1" title="Augmenter"><i class="fas fa-plus"></i></button>
                        <button type="submit" class="btn btn-outline-primary ms-2" title="Mettre à jour"><i class="fas fa-rotate"></i></button>
                      </form>
                      <p class="mb-0"><small class="text-muted">Prix unitaire:</small> <strong>{% if item.produit.prix_promo %}{{ item.produit.prix_promo }} FCFA <s>{{ item.produit.prix }} FCFA</s>{% else %}{{ item.produit.prix }} FCFA{% endif %}</strong></p>
                      <p class="mb-0"><small class="text-muted">Sous-total:</small> <strong>{{ item.prix_total }} FCFA</strong></p>
                    </div>
                  </div>
                  {% if not forloop.last %}<hr class="my-4"/>{% endif %}
                {% endfor %}
              {% else %}
                <div class="text-center py-5">
                  <h6>Votre panier est vide.</h6>
                  <a class="btn btn-light" href="{% url 'boutique' %}"><i class="fa-solid fa-store me-1"></i> Continuer mes achats</a>
                </div>
              {% endif %}
            </div>
          </div>

          <!-- Livraison estimée -->
          <div class="card mb-4">
            <div class="card-body">
              <p class="mb-2"><strong>Livraison estimée</strong></p>
              <p class="mb-0 text-muted" id="shippingDisplay">Calcul en cours...</p>
              <p class="mb-0 text-muted" id="distanceDisplay"></p>
            </div>
          </div>
        </div>

        <!-- Résumé -->
        <div class="col-md-4">
          <div class="card mb-4">
            <div class="card-header py-3"><h5>Résumé</h5></div>
            <div class="card-body">
              <ul class="list-group list-group-flush mb-3">
                <li class="list-group-item d-flex justify-content-between">Produits <span>{{ total }} FCFA</span></li>
                <li class="list-group-item d-flex justify-content-between">Livraison <span id="shippingSummary">{% if shipping %}{{ shipping }} FCFA{% else %}—{% endif %}</span></li>
                <li class="list-group-item d-flex justify-content-between">
                  <div><strong>Montant total</strong><p class="mb-0 text-muted small">(TVA incluse le cas échéant)</p></div>
                  <span id="totalSummary"><strong>{{ total|add:shipping|default:total }} FCFA</strong></span>
                </li>
              </ul>

              <a href="{% url 'boutique' %}" class="btn btn-light btn-lg w-100 mb-2">Continuer mes achats</a>

              <!-- Formulaire de commande -->
              <form method="post" action="{% url 'confirmer_commande' %}" id="orderForm" novalidate>
                {% csrf_token %}
                <input type="hidden" id="latitude" name="latitude">
                <input type="hidden" id="longitude" name="longitude">
                <input type="hidden" id="adresse_gps" name="adresse_gps">
                <input type="hidden" id="shipping" name="shipping">
                <div class="alert alert-info d-none" id="locationStatus" role="status" aria-live="polite"></div>

                <button type="button" class="btn btn-primary btn-lg w-100" id="confirmOrderBtn" aria-disabled="true">
                  <i class="fas fa-map-marker-alt me-2"></i>Confirmer ma commande
                </button>
              </form>
              <!-- NOTE: l'ancien script inline de soumission a été retiré pour éviter les doubles gestionnaires -->
            </div>
          </div>
        </div>

      </div>
    </div>
  </section>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/7.3.0/mdb.min.js"></script>

<script>
(function(){
  const total = Number("{{ total }}") || 0;

  // CSRF helper (fallback to cookie if header token not injected)
  function getCookie(name) {
    const m = document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
    return m ? m.pop() : '';
  }
  const CSRF = getCookie('csrftoken');

  // UI elements
  const shippingDisplay = document.getElementById('shippingDisplay');
  const shippingSummary = document.getElementById('shippingSummary');
  const totalSummary = document.getElementById('totalSummary');
  const distanceDisplay = document.getElementById('distanceDisplay');
  const latInput = document.getElementById('latitude');
  const lngInput = document.getElementById('longitude');
  const shippingInput = document.getElementById('shipping');
  const orderForm = document.getElementById('orderForm');
  const statusDiv = document.getElementById('locationStatus');
  const confirmBtn = document.getElementById('confirmOrderBtn');

  let locationReady = false;
  let shippingReady = false;

  function setStatus(msg, type) {
    statusDiv.classList.remove('d-none', 'alert-info', 'alert-danger', 'alert-warning', 'alert-success');
    statusDiv.classList.add('alert-' + (type || 'info'));
    statusDiv.innerHTML = msg;
  }
  function clearStatus() {
    statusDiv.classList.add('d-none');
    statusDiv.textContent = '';
  }
  function setButtonState(ready){
    locationReady = !!ready;
    confirmBtn.setAttribute('aria-disabled', ready ? 'false' : 'true');
    confirmBtn.classList.toggle('disabled', !ready && !navigator.geolocation);
  }

  function updateTotals(shippingValue){
    const sv = Number(shippingValue) || 0;
    shippingSummary.textContent = sv ? (sv + ' FCFA') : '—';
    totalSummary.textContent = (total + sv) + ' FCFA';
  }

  function calculateShipping(latitude, longitude) {
    return fetch("{% url 'calculer_shipping' %}", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        "X-CSRFToken": CSRF
      },
      body: `latitude=${encodeURIComponent(latitude)}&longitude=${encodeURIComponent(longitude)}`
    }).then(res => {
      if (!res.ok) throw new Error('HTTP ' + res.status);
      return res.json();
    });
  }

  function setLocation(lat, lng, {recalc=true} = {}){
    latInput.value = lat;
    lngInput.value = lng;
    setButtonState(true);
    if (recalc){
      shippingDisplay.textContent = "Calcul en cours...";
      calculateShipping(lat, lng).then(data => {
        const shippingValue = Number(data.shipping || 0);
        const distanceValue = Number(data.distance_km || 0);
        shippingDisplay.textContent = shippingValue ? (shippingValue + " FCFA") : "—";
        distanceDisplay.textContent = distanceValue ? ("Distance: " + distanceValue + " km") : "";
        shippingInput.value = shippingValue || '';
        shippingReady = shippingValue >= 0; // allow 0 cost shipping
        updateTotals(shippingValue);
      }).catch(() => {
        shippingDisplay.textContent = "Calcul impossible";
        distanceDisplay.textContent = "";
        shippingInput.value = '';
        shippingReady = false;
        setButtonState(false); // block until shipping calculable
      });
    }
  }

  // Initial: profile coords or geolocation
  (function initLocation(){
    try{
      const latValue = JSON.parse(document.getElementById('lat_json').textContent);
      const lngValue = JSON.parse(document.getElementById('lng_json').textContent);
      if (typeof latValue === 'number' && typeof lngValue === 'number'){
        setLocation(latValue, lngValue, { recalc:true });
        return;
      }
    }catch(_){}
    // Fallback: ask browser geolocation but DO NOT submit yet
    if (navigator.geolocation){
      setStatus('<i class="fas fa-spinner fa-spin"></i> Récupération de votre position...', 'info');
      navigator.geolocation.getCurrentPosition(function(position){
        clearStatus();
        setLocation(position.coords.latitude, position.coords.longitude, { recalc:true });
      }, function(){
        setStatus('Impossible de récupérer votre position GPS. Autorisez la géolocalisation puis réessayez.', 'warning');
        setButtonState(false);
      }, { enableHighAccuracy: true, timeout: 10000, maximumAge: 600000 });
    }else{
      setStatus('Géolocalisation non supportée par votre navigateur.', 'danger');
      setButtonState(false);
    }
  })();

  // Confirm button: NEVER submit if no GPS (lat/lng) or shipping not computed
  confirmBtn.addEventListener('click', function(){
    const lat = parseFloat(latInput.value);
    const lng = parseFloat(lngInput.value);

    // If coords already present and shipping computed, submit
    if (!isNaN(lat) && !isNaN(lng) && shippingReady){
      clearStatus();
      orderForm.submit();
      return;
    }

    // Else, try to obtain geolocation now; submit only on success+shipping
    if (navigator.geolocation){
      setStatus('<i class="fas fa-spinner fa-spin"></i> Récupération de votre position...', 'info');
      navigator.geolocation.getCurrentPosition(function(position){
        const la = position.coords.latitude;
        const ln = position.coords.longitude;
        setLocation(la, ln, { recalc:true });
        // Wait for shipping calculation to finish before submitting
        let tries = 0;
        const iv = setInterval(() => {
          tries++;
          if (shippingReady){
            clearInterval(iv);
            clearStatus();
            orderForm.submit();
          }else if (tries > 20){ // ~2s
            clearInterval(iv);
            setStatus('Le calcul des frais de livraison prend plus de temps. Réessayez dans un instant.', 'warning');
          }
        }, 100);
      }, function(){
        setStatus('Position GPS requise pour confirmer la commande. Autorisez la géolocalisation puis réessayez.', 'danger');
      }, { enableHighAccuracy: true, timeout: 10000, maximumAge: 600000 });
    }else{
      setStatus('Votre navigateur ne supporte pas la géolocalisation. Impossible de confirmer la commande.', 'danger');
    }
  });

  // Extra safety: block any accidental form submit without GPS/shipping
  orderForm.addEventListener('submit', function(e){
    const lat = parseFloat(latInput.value);
    const lng = parseFloat(lngInput.value);
    const shp = shippingInput.value;
    if (isNaN(lat) || isNaN(lng) || shp === '' || isNaN(Number(shp))){
      e.preventDefault();
      setStatus('Position GPS et calcul de livraison requis avant de confirmer la commande.', 'danger');
    }
  });

  // Qty buttons (unchanged)
  document.addEventListener('click', function(e) {
    const btn = e.target.closest('.btn-qty-change');
    if (!btn) return;
    const targetSelector = btn.getAttribute('data-target');
    const delta = parseInt(btn.getAttribute('data-delta'), 10);
    const input = document.querySelector(targetSelector);
    if (!input) return;
    const current = parseInt(input.value || '0', 10);
    const next = Math.max(0, current + delta);
    input.value = next;
    const form = btn.closest('form');
    if (form) form.submit();
  });
})();
</script>
{% endblock %}